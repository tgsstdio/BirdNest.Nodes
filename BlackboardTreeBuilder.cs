//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34014
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Linq.Expressions;
using System.Collections.Generic;

namespace BirdNest.Nodes
{
	public class BlackboardTreeBuilder<T> : IBlackBoardTreeBuilder<T> where T : class
	{
		public ITreeBuilder TreeBuilder
		{
			get;
			set;
		}

		public ITreeDictionary NodeResolver
		{
			get;
			set;
		}

		private List<Type> mDependencies;
		public BlackboardTreeBuilder (ITreeBuilder main, ITreeDictionary dictionary)
		{
			this.TreeBuilder = main;
			this.NodeResolver = dictionary;
			this.mDependencies = new List<Type> ();
			this.mDependencies.Add (typeof(T));
		}

		#region ITreeBuilder implementation

		public BlackboardTreeBuilder<T>  Selector ()
		{
			var p = new Selector();
			this.TreeBuilder.AddNode(p);
			return this;
		}

		public BlackboardTreeBuilder<T>  AddTree (Tree existTree)
		{
			var p = new EntireTreeNode(existTree);
			this.TreeBuilder.AddNode(p);
			return this;
		}

		public BlackboardTreeBuilder<T>  Parallel ()
		{
			var p = new Parallel();
			this.TreeBuilder.AddNode(p);
			return this;
		}

		public BlackboardTreeBuilder<T>  Sequence ()
		{
			var p = new Sequence();
			this.TreeBuilder.AddNode(p);
			return this;
		}

		public BlackboardTreeBuilder<T>  Action (System.Func<T, Result> func)
		{
			var p = new BlackboardAction<T>(func);
			this.TreeBuilder.AddNode(p);
			return this;
		}

		public BlackboardTreeBuilder<T>  Set (System.Action<T> func)
		{
			var p = new BlackboardSetter<T>(func);
			this.TreeBuilder.AddNode(p);
			return this;
		}

		public BlackboardTreeBuilder<T> IsTrue (System.Func<T, bool> func)
		{
			var p = new BlackboardCondition<T>(func);
			this.TreeBuilder.AddNode(p);
			return this;
		}

		public BlackboardTreeBuilder<T> IsFalse (System.Func<T, bool> func)
		{
			var p = new BlackboardNotCondition<T>(func);
			this.TreeBuilder.AddNode(p);
			return this;
		}

		public BlackboardTreeBuilder<T> Success ()
		{
			var p = new SuccessNode();
			this.TreeBuilder.AddNode(p);
			return this;
		}

		public BlackboardTreeBuilder<T> Failed ()
		{
			var p = new FailedNode();
			this.TreeBuilder.AddNode(p);
			return this;
		}

		//		public BlackboardTreeBuilder<T>  IsTrue (Expression<System.Func<T, object>> expr)
//		{
//			var body = (MemberExpression)expr.Body;
//
//			var param = Expression.Parameter(typeof(T), "param");
//			var member = Expression.Property(param, body.Member.Name);
//
//			var lamdba = Expression.Lambda<Func<T, bool>>(expr, param);
//			return this.IsTrue (lamdba.Compile());
//		}

		public BlackboardTreeBuilder<T> Begin ()
		{
			this.TreeBuilder.Begin();
			return this;
		}

		public BlackboardTreeBuilder<T> End ()
		{
			this.TreeBuilder.End();
			return this;
		}

		public Tree Build ()
		{
			var tree = this.TreeBuilder.Build();
			tree.Dependencies = new List<Type> ();
			foreach (var depend in mDependencies) {
				tree.Dependencies.Add (depend);
			}
			return tree;
		}

		public BlackboardTreeBuilder<T> UseStub<TAction, S>()
			where S : class
			where TAction : Action, IBlackboardNode<S>
		{
			INode found = this.NodeResolver.Resolve<S, TAction>();
			this.TreeBuilder.AddNode(found);			
			return this;
		}

		public BlackboardTreeBuilder<T> UseStub<TAction>()
			where TAction : Action, IBlackboardNode<T>
		{
			INode found = this.NodeResolver.Resolve<T, TAction>();
			this.TreeBuilder.AddNode(found);			
			return this;
		}

		public INode BuildAndRegisterAs<TAction>()
			where TAction : Action, IBlackboardNode<T>
		{
			Tree compiledTree = this.TreeBuilder.Build();
			var found = this.NodeResolver.AddStub<T, TAction>(compiledTree);	
			this.TreeBuilder.AddNode(found);
			return found;
		}

		#endregion
	}
}

