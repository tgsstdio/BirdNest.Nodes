//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34014
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using NUnit.Framework;
using System;
using bt;

namespace Blackberry.UnitTests
{
	[TestFixture()]
	public class Test
	{
		[Test()]
		public void TestCase ()
		{
			const bool EXPECTED = false;

			var board = new TransistentBlackboard<CharacterInfo>(() => new CharacterInfo());
			var dictionary = new TreeDictionary();
			var builder = new BlackboardTreeBuilder<Enemy>(new TreeBuilder(), dictionary);
			var plan = builder
				.Success();				

			var compiled = plan.Build();

			var walker = new NodeWalker(compiled);
			walker.Restart();
			walker.ComputeAllSteps();
			Assert.AreEqual(EXPECTED, board.Context.IsLeader);
			Assert.IsTrue(walker.IsComplete);
			Assert.AreEqual(Result.SUCCESS, walker.Outcome);
		}

		public interface IPlayerLocator
		{

		}

		public class EnemySituation
		{
			public IPlayerLocator Service;
			public Enemy Individual;
		}

		public class Enemy
		{
			public bool WithinDistance ()
			{
				return true;
			}

			public bool HasTarget ()
			{
				return false;
			}

			public Result MoveTowards ()
			{
				throw new NotImplementedException ();
			}

			public Result SelectTarget ()
			{
				throw new NotImplementedException ();
			}

			public Result HitTarget ()
			{
				throw new NotImplementedException ();
			}
		}

		public abstract class BaseEnemyAI : bt.Action, IBlackboardNode<Enemy>
		{
			#region IBlackboardNode implementation

			public Blackboard<Enemy> Board
			{
				get;
				set;
			}

			#endregion


		}

		[Test()]
		public void EnemyAI()
		{
			var dictionary = new TreeDictionary();
			var builder = new BlackboardTreeBuilder<Enemy>(new TreeBuilder(), dictionary);

			builder
				.Sequence()
					.Begin ()
					.Selector()
						.Begin ()
							.IsTrue((e) => e.HasTarget())
							.Selector ()
							.Begin ()
								.Action((e) => e.SelectTarget())
							.End ()
						.End ()
					.Selector()
						.Begin ()
							.IsTrue((e) => e.WithinDistance())
							.Selector ()
							.Begin ()
								.Action((e) => e.MoveTowards())
							.End ()
						.End()
					.End ()
					.Action ((e) => e.HitTarget())
				.End ()
			.BuildAndRegisterAs<BaseEnemyAI>();

			var topBuilder = new BlackboardTreeBuilder<EnemySituation>(new TreeBuilder(), dictionary);
			var tree = topBuilder
				.UseStub<BaseEnemyAI, Enemy>()
				.Build();

			var walker = new NodeWalker(tree);
			walker.AddBlackboard<EnemySituation>(new Blackboard<EnemySituation>{ Context = new EnemySituation()});
			walker.AddDependentBlackboard<EnemySituation, Enemy>((es) => {return es.Individual;});
		}
	}
}

