//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34014
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;


namespace BirdNest.Nodes
{
	public class TreeDictionary : ITreeDictionary
	{
		private readonly Dictionary<Type, INode> mKnownTrees;
		public TreeDictionary ()
		{
			mKnownTrees = new Dictionary<Type, INode>();
		}

		#region ITreeDictionary implementation

		public void Register<T, TParent> (TParent stub) where T : class where TParent : Step, IBlackboardNode<T>
		{
			mKnownTrees.Add(typeof(TParent), stub);
		}

		public INode AddStub<T, TParent> (Tree treeNode) where T : class where TParent : Step, IBlackboardNode<T>
		{
			var stub = new BlackboardEntireTreeNode<T>(treeNode);
			mKnownTrees.Add(typeof(TParent), stub);
			return stub;
		}

		public INode Resolve<T, TParent> () where T : class where TParent : Step
		{
			return mKnownTrees[typeof(TParent)];
		}

		#endregion


	}
}
   
